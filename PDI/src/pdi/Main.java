/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pdi;

import java.awt.Color;
import java.awt.image.BufferedImage;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import javax.swing.JFrame;

/**
 *
 * @author Pablo Suria
 */
public class Main extends javax.swing.JFrame {

    private static final JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));

    private ImagePanel pnlImage;
    private double[][][] YIQ;

    public Main() {
        initComponents();

        pnlImage = new ImagePanel();
        pnlImage.setBounds(110, 20, 615, 460);
        this.add(pnlImage);
        showFilename(null);
        setButtonsEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlControl = new javax.swing.JPanel();
        btnDiminuir = new javax.swing.JButton();
        btnAumentar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Menu = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        OpenAction = new javax.swing.JMenuItem();
        CLoseAction = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        SaveAction = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        QuitAction = new javax.swing.JMenuItem();
        Filters = new javax.swing.JMenu();
        toYIQ = new javax.swing.JMenuItem();
        toRGB = new javax.swing.JMenuItem();
        Bandas = new javax.swing.JMenu();
        R = new javax.swing.JMenuItem();
        RM = new javax.swing.JMenuItem();
        G = new javax.swing.JMenuItem();
        GM = new javax.swing.JMenuItem();
        B = new javax.swing.JMenuItem();
        BM = new javax.swing.JMenuItem();
        Negativos = new javax.swing.JMenu();
        NR = new javax.swing.JMenuItem();
        NG = new javax.swing.JMenuItem();
        NB = new javax.swing.JMenuItem();
        NY = new javax.swing.JMenuItem();
        N = new javax.swing.JMenuItem();
        Brilhos = new javax.swing.JMenu();
        BR = new javax.swing.JMenu();
        ADITIVO1 = new javax.swing.JMenuItem();
        MULTIPLICATIVO1 = new javax.swing.JMenuItem();
        BG = new javax.swing.JMenu();
        ADITIVO2 = new javax.swing.JMenuItem();
        MULTIPLICATIVO2 = new javax.swing.JMenuItem();
        BB = new javax.swing.JMenu();
        ADITIVO3 = new javax.swing.JMenuItem();
        MULTIPLICATIVO3 = new javax.swing.JMenuItem();
        BY = new javax.swing.JMenu();
        ADITIVO5 = new javax.swing.JMenuItem();
        MULTIPLICATIVO5 = new javax.swing.JMenuItem();
        BC = new javax.swing.JMenu();
        ADITIVO4 = new javax.swing.JMenuItem();
        MULTIPLICATIVO4 = new javax.swing.JMenuItem();
        Limiares = new javax.swing.JMenu();
        LR = new javax.swing.JMenuItem();
        LG = new javax.swing.JMenuItem();
        LB = new javax.swing.JMenuItem();
        LY = new javax.swing.JMenuItem();
        Medianas = new javax.swing.JMenu();
        MR = new javax.swing.JMenuItem();
        MG = new javax.swing.JMenuItem();
        MB = new javax.swing.JMenuItem();
        MY = new javax.swing.JMenuItem();
        MC = new javax.swing.JMenuItem();
        Convolucao = new javax.swing.JMenu();
        CR = new javax.swing.JMenuItem();
        CG = new javax.swing.JMenuItem();
        CB = new javax.swing.JMenuItem();
        CY = new javax.swing.JMenuItem();
        CC = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlControl.setMaximumSize(new java.awt.Dimension(100, 100));

        btnDiminuir.setText("Diminuir");
        btnDiminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiminuirActionPerformed(evt);
            }
        });

        btnAumentar.setText("Aumentar");
        btnAumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAumentarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlLayout = new javax.swing.GroupLayout(pnlControl);
        pnlControl.setLayout(pnlControlLayout);
        pnlControlLayout.setHorizontalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnDiminuir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnAumentar, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        pnlControlLayout.setVerticalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDiminuir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAumentar)
                .addContainerGap(396, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("JLabel");

        File.setText("File");

        OpenAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenAction.setText("Open");
        OpenAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionActionPerformed(evt);
            }
        });
        File.add(OpenAction);

        CLoseAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        CLoseAction.setText("Close");
        CLoseAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLoseActionActionPerformed(evt);
            }
        });
        File.add(CLoseAction);
        File.add(jSeparator1);

        SaveAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveAction.setText("Save As");
        SaveAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionActionPerformed(evt);
            }
        });
        File.add(SaveAction);
        File.add(jSeparator2);

        QuitAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        QuitAction.setText("Quit");
        QuitAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitActionActionPerformed(evt);
            }
        });
        File.add(QuitAction);

        Menu.add(File);

        Filters.setText("Filters");

        toYIQ.setText("Transformar YIQ");
        toYIQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toYIQActionPerformed(evt);
            }
        });
        Filters.add(toYIQ);

        toRGB.setText("Transformar RGB");
        toRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toRGBActionPerformed(evt);
            }
        });
        Filters.add(toRGB);

        Bandas.setText("Exibição de Bandas");

        R.setText("Vermelho");
        R.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RActionPerformed(evt);
            }
        });
        Bandas.add(R);

        RM.setText("Vermelho Monocromatico");
        RM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RMActionPerformed(evt);
            }
        });
        Bandas.add(RM);

        G.setText("Verde");
        G.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GActionPerformed(evt);
            }
        });
        Bandas.add(G);

        GM.setText("Verde Monocromatico");
        GM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GMActionPerformed(evt);
            }
        });
        Bandas.add(GM);

        B.setText("Azul");
        B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActionPerformed(evt);
            }
        });
        Bandas.add(B);

        BM.setText("Azul Monocromatico");
        BM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMActionPerformed(evt);
            }
        });
        Bandas.add(BM);

        Filters.add(Bandas);

        Negativos.setText("Negativo");

        NR.setText("Vermelho");
        NR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NRActionPerformed(evt);
            }
        });
        Negativos.add(NR);

        NG.setText("Verde");
        NG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NGActionPerformed(evt);
            }
        });
        Negativos.add(NG);

        NB.setText("Azul");
        NB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NBActionPerformed(evt);
            }
        });
        Negativos.add(NB);

        NY.setText("Y");
        NY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NYActionPerformed(evt);
            }
        });
        Negativos.add(NY);

        N.setText("Completo");
        N.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NActionPerformed(evt);
            }
        });
        Negativos.add(N);

        Filters.add(Negativos);

        Brilhos.setText("Controle de Brilho");

        BR.setText("Vermelho");

        ADITIVO1.setText("Aditivo");
        ADITIVO1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADITIVO1ActionPerformed(evt);
            }
        });
        BR.add(ADITIVO1);

        MULTIPLICATIVO1.setText("Multiplicativo");
        MULTIPLICATIVO1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MULTIPLICATIVO1ActionPerformed(evt);
            }
        });
        BR.add(MULTIPLICATIVO1);

        Brilhos.add(BR);

        BG.setText("Verde");

        ADITIVO2.setText("Aditivo");
        ADITIVO2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADITIVO2ActionPerformed(evt);
            }
        });
        BG.add(ADITIVO2);

        MULTIPLICATIVO2.setText("Multiplicativo");
        MULTIPLICATIVO2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MULTIPLICATIVO2ActionPerformed(evt);
            }
        });
        BG.add(MULTIPLICATIVO2);

        Brilhos.add(BG);

        BB.setText("Azul");

        ADITIVO3.setText("Aditivo");
        ADITIVO3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADITIVO3ActionPerformed(evt);
            }
        });
        BB.add(ADITIVO3);

        MULTIPLICATIVO3.setText("Multiplicativo");
        MULTIPLICATIVO3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MULTIPLICATIVO3ActionPerformed(evt);
            }
        });
        BB.add(MULTIPLICATIVO3);

        Brilhos.add(BB);

        BY.setText("Y");

        ADITIVO5.setText("Aditivo");
        ADITIVO5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADITIVO5ActionPerformed(evt);
            }
        });
        BY.add(ADITIVO5);

        MULTIPLICATIVO5.setText("Multiplicativo");
        MULTIPLICATIVO5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MULTIPLICATIVO5ActionPerformed(evt);
            }
        });
        BY.add(MULTIPLICATIVO5);

        Brilhos.add(BY);

        BC.setText("Completo");

        ADITIVO4.setText("Aditivo");
        ADITIVO4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADITIVO4ActionPerformed(evt);
            }
        });
        BC.add(ADITIVO4);

        MULTIPLICATIVO4.setText("Multiplicativo");
        MULTIPLICATIVO4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MULTIPLICATIVO4ActionPerformed(evt);
            }
        });
        BC.add(MULTIPLICATIVO4);

        Brilhos.add(BC);

        Filters.add(Brilhos);

        Limiares.setText("Limiarização");

        LR.setText("Vermelho");
        LR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LRActionPerformed(evt);
            }
        });
        Limiares.add(LR);

        LG.setText("Verde");
        LG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LGActionPerformed(evt);
            }
        });
        Limiares.add(LG);

        LB.setText("Azul");
        LB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LBActionPerformed(evt);
            }
        });
        Limiares.add(LB);

        LY.setText("Y");
        LY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LYActionPerformed(evt);
            }
        });
        Limiares.add(LY);

        Filters.add(Limiares);

        Medianas.setText("Filtro Mediana");

        MR.setText("Vermelho");
        MR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MRActionPerformed(evt);
            }
        });
        Medianas.add(MR);

        MG.setText("Verde");
        MG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MGActionPerformed(evt);
            }
        });
        Medianas.add(MG);

        MB.setText("Azul");
        MB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBActionPerformed(evt);
            }
        });
        Medianas.add(MB);

        MY.setText("Y");
        MY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MYActionPerformed(evt);
            }
        });
        Medianas.add(MY);

        MC.setText("Completra");
        MC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MCActionPerformed(evt);
            }
        });
        Medianas.add(MC);

        Filters.add(Medianas);

        Convolucao.setText("Convolução");

        CR.setText("Vermelho");
        CR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CRActionPerformed(evt);
            }
        });
        Convolucao.add(CR);

        CG.setText("Verde");
        CG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CGActionPerformed(evt);
            }
        });
        Convolucao.add(CG);

        CB.setText("Azul");
        CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBActionPerformed(evt);
            }
        });
        Convolucao.add(CB);

        CY.setText("Y");
        CY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CYActionPerformed(evt);
            }
        });
        Convolucao.add(CY);

        CC.setText("Completo");
        CC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CCActionPerformed(evt);
            }
        });
        Convolucao.add(CC);

        Filters.add(Convolucao);

        Menu.add(Filters);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 620, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, 0)
                .addComponent(pnlControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /** 
     * Esse metodo abre um arquivo e passa esse arquivo para o ImageManager que retorna
     * uma BufferedImage caso o arquivo seja uma imagem ou null caso contrario
     */
    private void OpenActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File selectedFile = fileChooser.getSelectedFile();
        BufferedImage image = ImageManager.loadImage(selectedFile);

        if (image == null) {
            JOptionPane.showMessageDialog(this,
                    "The file was not in a recognized image file format.",
                    "Image Load Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        pnlImage.setImage(image);
        this.resize();
        showFilename(selectedFile.getPath());
        setButtonsEnabled(true);
    }//GEN-LAST:event_OpenActionActionPerformed

    /** 
     * Esse metodo retorna o programa para o estado inicial
     */
    private void CLoseActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLoseActionActionPerformed
        pnlImage.clearImage();
        YIQ = null;
        this.resize();
        showFilename(null);
        setButtonsEnabled(false);
    }//GEN-LAST:event_CLoseActionActionPerformed

    /**
     * Esse metodo salva a imagem atual com uso do ImageManager
     */
    private void SaveActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionActionPerformed
        BufferedImage currentImage = pnlImage.getCurrentImage();
        if (currentImage != null) {
            int returnVal = fileChooser.showSaveDialog(this);

            if (returnVal != JFileChooser.APPROVE_OPTION) {
                return;
            }

            File selectedFile = fileChooser.getSelectedFile();
            ImageManager.saveImage(currentImage, selectedFile);

            showFilename(selectedFile.getPath());
        }
    }//GEN-LAST:event_SaveActionActionPerformed

    /**
     * Esse metodo encerra o programa
     */
    private void QuitActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitActionActionPerformed
        System.exit(0);
    }//GEN-LAST:event_QuitActionActionPerformed

    /**
     * Esse metodo cria uma matriz que representa a imagem atual em formato YIQ
     */
    private void toYIQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toYIQActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();

        if (image != null) {

            YIQ = new double[image.getWidth()][image.getHeight()][3];

            for (int lin = 0; lin < image.getWidth(); lin++) {
                for (int col = 0; col < image.getHeight(); col++) {
                    Color color = new Color(image.getRGB(lin, col));
                    int r = color.getRed();
                    int g = color.getGreen();
                    int b = color.getBlue();

                    YIQ[lin][col][0] = 0.299 * r + 0.587 * g + 0.114 * b;
                    YIQ[lin][col][1] = 0.596 * r - 0.274 * g - 0.322 * b;
                    YIQ[lin][col][2] = 0.211 * r - 0.523 * g + 0.312 * b;

                }
            }
        }
    }//GEN-LAST:event_toYIQActionPerformed

    /**
     * Caso a matriz YIQ ja estana inicializada, esse metodo a converte em uma imagem RGB.
     * Criando uma nova janela para mostra-la
     */
    private void toRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toRGBActionPerformed
        if (YIQ != null) {
            BufferedImage newImage = new BufferedImage(YIQ.length, YIQ[0].length, BufferedImage.TYPE_INT_RGB);

            for (int lin = 0; lin < newImage.getWidth(); lin++) {
                for (int col = 0; col < newImage.getHeight(); col++) {

                    double r = YIQ[lin][col][0] + 0.956 * YIQ[lin][col][1] + 0.621 * YIQ[lin][col][2];
                    double g = YIQ[lin][col][0] - 0.272 * YIQ[lin][col][1] - 0.647 * YIQ[lin][col][2];
                    double b = YIQ[lin][col][0] - 1.106 * YIQ[lin][col][1] + 1.703 * YIQ[lin][col][2];

                    r = (r > 255) ? 255 : (r < 0) ? 0 : r;
                    g = (g > 255) ? 255 : (g < 0) ? 0 : g;
                    b = (b > 255) ? 255 : (b < 0) ? 0 : b;

                    Color c = new Color((int) r, (int) g, (int) b);
                    newImage.setRGB(lin, col, c.getRGB());

                }
            }
            JFrame frame = new JFrame("Imagem YIQ para RGB");
            ImagePanel pane = new ImagePanel();
            pane.setImage(newImage);
            frame.add(pane);
            frame.setSize(pane.getWidth() + 7, pane.getHeight() + 30);
            frame.setVisible(true);
        }
        YIQ = null;
    }//GEN-LAST:event_toRGBActionPerformed

    /**
     * Esse metodo separa a banda vermelha da imagem e a aprensenta para o usuario
     * @param evt 
     */
    private void RActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
        if (image != null) {
            for (int lin = 0; lin < image.getWidth(); lin++) {
                for (int col = 0; col < image.getHeight(); col++) {
                    Color color = new Color(image.getRGB(lin, col));
                    color = new Color(color.getRed(), 0, 0);
                    newImage.setRGB(lin, col, color.getRGB());
                }
            }
            pnlImage.setImage(newImage);
        }
    }//GEN-LAST:event_RActionPerformed

    /**
     * Esse metodo separa a banda vermelha da imagem e a aprensenta para o usuario de forma monocromatica
     * @param evt 
     */
    private void RMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RMActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
            for (int lin = 0; lin < image.getWidth(); lin++) {
                for (int col = 0; col < image.getHeight(); col++) {
                    Color color = new Color(image.getRGB(lin, col));
                    color = new Color(color.getRed(), color.getRed(), color.getRed());
                    newImage.setRGB(lin, col, color.getRGB());
                }
            }
            pnlImage.setImage(newImage);
        }
    }//GEN-LAST:event_RMActionPerformed

    /**
     * Esse metodo separa a banda verde da imagem e a aprensenta para o usuario
     * @param evt 
     */
    private void GActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
            for (int lin = 0; lin < image.getWidth(); lin++) {
                for (int col = 0; col < image.getHeight(); col++) {
                    Color color = new Color(image.getRGB(lin, col));
                    color = new Color(0, color.getGreen(), 0);
                    newImage.setRGB(lin, col, color.getRGB());
                }
            }
            pnlImage.setImage(newImage);
        }
    }//GEN-LAST:event_GActionPerformed

    /**
     * Esse metodo separa a banda vermelha da imagem e a aprensenta para o usuario de forma monocromatica
     * @param evt 
     */
    private void GMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GMActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
            for (int lin = 0; lin < image.getWidth(); lin++) {
                for (int col = 0; col < image.getHeight(); col++) {
                    Color color = new Color(image.getRGB(lin, col));
                    color = new Color(color.getGreen(), color.getGreen(), color.getGreen());
                    newImage.setRGB(lin, col, color.getRGB());
                }
            }
            pnlImage.setImage(newImage);
        }
    }//GEN-LAST:event_GMActionPerformed

    /**
     * Esse metodo separa a banda azul da imagem e a aprensenta para o usuario
     * @param evt 
     */
    private void BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
            for (int lin = 0; lin < image.getWidth(); lin++) {
                for (int col = 0; col < image.getHeight(); col++) {
                    Color color = new Color(image.getRGB(lin, col));
                    color = new Color(0, 0, color.getBlue());
                    newImage.setRGB(lin, col, color.getRGB());
                }
            }
            pnlImage.setImage(newImage);
        }
    }//GEN-LAST:event_BActionPerformed

    /**
     * Esse metodo separa a banda vermelha da imagem e a aprensenta para o usuario de forma monocromatica
     * @param evt 
     */
    private void BMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
            for (int lin = 0; lin < image.getWidth(); lin++) {
                for (int col = 0; col < image.getHeight(); col++) {
                    Color color = new Color(image.getRGB(lin, col));
                    color = new Color(color.getBlue(), color.getBlue(), color.getBlue());
                    newImage.setRGB(lin, col, color.getRGB());
                }
            }
            pnlImage.setImage(newImage);
        }
    }//GEN-LAST:event_BMActionPerformed

    /**
     * Esse metodo diminui a imagem atual para metade de seu tamanho
     * @param evt 
     */
    private void btnDiminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiminuirActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {

            int width = image.getWidth() / 2;
            int height = image.getHeight() / 2;
            BufferedImage newImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    newImage.setRGB(x, y, image.getRGB(x * 2, y * 2));
                }
            }
            pnlImage.setImage(newImage);
            this.resize();
        }
    }//GEN-LAST:event_btnDiminuirActionPerformed

    /**
     * Esse metodo amplia a imagem atual para o dobro de seu tamanho
     * @param evt 
     */
    private void btnAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAumentarActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {

            int width = image.getWidth();
            int height = image.getHeight();
            BufferedImage newImage = new BufferedImage(width * 2, height * 2, BufferedImage.TYPE_INT_RGB);

            // copy pixel data into new image
            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    Color col = new Color(image.getRGB(x, y));
                    newImage.setRGB(x * 2, y * 2, col.getRGB());
                    newImage.setRGB(x * 2 + 1, y * 2, col.getRGB());
                    newImage.setRGB(x * 2, y * 2 + 1, col.getRGB());
                    newImage.setRGB(x * 2 + 1, y * 2 + 1, col.getRGB());
                }
            }

            pnlImage.setImage(newImage);
            this.resize();
        }
    }//GEN-LAST:event_btnAumentarActionPerformed

    /**
     * Esse metodo aplica o negativo somente na banda vermelha da imagem
     * @param evt 
     */
    private void NRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NRActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
            for (int lin = 0; lin < image.getWidth(); lin++) {
                for (int col = 0; col < image.getHeight(); col++) {
                    Color color = new Color(image.getRGB(lin, col));
                    color = new Color(255 - color.getRed(), color.getGreen(), color.getBlue());
                    newImage.setRGB(lin, col, color.getRGB());
                }
            }
            pnlImage.setImage(newImage);
        }
    }//GEN-LAST:event_NRActionPerformed

    /**
     * Esse metodo aplica o negativo somente na banda verde da imagem
     * @param evt 
     */
    private void NGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NGActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
            for (int lin = 0; lin < image.getWidth(); lin++) {
                for (int col = 0; col < image.getHeight(); col++) {
                    Color color = new Color(image.getRGB(lin, col));
                    color = new Color(color.getRed(), 255 - color.getGreen(), color.getBlue());
                    newImage.setRGB(lin, col, color.getRGB());
                }
            }
            pnlImage.setImage(newImage);
        }
    }//GEN-LAST:event_NGActionPerformed

    /**
     * Esse metodo aplica o negativo somente na banda azul da imagem
     * @param evt 
     */
    private void NBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NBActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
            for (int lin = 0; lin < image.getWidth(); lin++) {
                for (int col = 0; col < image.getHeight(); col++) {
                    Color color = new Color(image.getRGB(lin, col));
                    color = new Color(color.getRed(), color.getGreen(), 255 - color.getBlue());
                    newImage.setRGB(lin, col, color.getRGB());
                }
            }
            pnlImage.setImage(newImage);
        }
    }//GEN-LAST:event_NBActionPerformed

    /**
     * Esse metodo aplica o negativo em todas as bandas da imagem
     * @param evt 
     */
    private void NActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
            for (int lin = 0; lin < image.getWidth(); lin++) {
                for (int col = 0; col < image.getHeight(); col++) {
                    Color color = new Color(image.getRGB(lin, col));
                    color = new Color(255 - color.getRed(), 255 - color.getGreen(), 255 - color.getBlue());
                    newImage.setRGB(lin, col, color.getRGB());
                }
            }
            pnlImage.setImage(newImage);
        }
    }//GEN-LAST:event_NActionPerformed
    
    /**
     * Esse metodo aplica o controle de brilho aditivo somente na banda vermelha da imagem
     * @param evt 
     */
    private void ADITIVO1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADITIVO1ActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");
                if (input == null) {
                    return;
                }
                int c = Integer.parseInt(input);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        Color color = new Color(image.getRGB(lin, col));
                        int r = color.getRed() + c;
                        int g = color.getGreen();
                        int b = color.getBlue();

                        r = (r > 255) ? 255 : (r < 0) ? 0 : r;

                        color = new Color(r, g, b);
                        newImage.setRGB(lin, col, color.getRGB());
                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_ADITIVO1ActionPerformed

    /**
     * Esse metodo aplica o controle de brilho multiplicativo somente na banda vermelha da imagem
     * @param evt 
     */
    private void MULTIPLICATIVO1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MULTIPLICATIVO1ActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");

                if (input == null) {
                    return;
                }
                int c = Integer.parseInt(input);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        Color color = new Color(image.getRGB(lin, col));
                        int r = color.getRed() * c;
                        int g = color.getGreen();
                        int b = color.getBlue();

                        r = (r > 255) ? 255 : (r < 0) ? 0 : r;

                        color = new Color(r, g, b);
                        newImage.setRGB(lin, col, color.getRGB());
                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_MULTIPLICATIVO1ActionPerformed

    /**
     * Esse metodo aplica o controle de brilho aditivo somente na banda verde da imagem
     * @param evt 
     */
    private void ADITIVO2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADITIVO2ActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");
                if (input == null) {
                    return;
                }
                int c = Integer.parseInt(input);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        Color color = new Color(image.getRGB(lin, col));
                        int r = color.getRed();
                        int g = color.getGreen() + c;
                        int b = color.getBlue();

                        g = (g > 255) ? 255 : (g < 0) ? 0 : g;

                        color = new Color(r, g, b);
                        newImage.setRGB(lin, col, color.getRGB());
                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_ADITIVO2ActionPerformed

    /**
     * Esse metodo aplica o controle de brilho multiplicativo somente na banda verde da imagem
     * @param evt 
     */
    private void MULTIPLICATIVO2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MULTIPLICATIVO2ActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");

                if (input == null) {
                    return;
                }
                int c = Integer.parseInt(input);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        Color color = new Color(image.getRGB(lin, col));
                        int r = color.getRed();
                        int g = color.getGreen() * c;
                        int b = color.getBlue();

                        g = (g > 255) ? 255 : (g < 0) ? 0 : g;

                        color = new Color(r, g, b);
                        newImage.setRGB(lin, col, color.getRGB());
                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_MULTIPLICATIVO2ActionPerformed

    /**
     * Esse metodo aplica o controle de brilho aditivo somente na banda azul da imagem
     * @param evt 
     */
    private void ADITIVO3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADITIVO3ActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");
                if (input == null) {
                    return;
                }
                int c = Integer.parseInt(input);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        Color color = new Color(image.getRGB(lin, col));
                        int r = color.getRed();
                        int g = color.getGreen();
                        int b = color.getBlue() + c;

                        b = (r > 255) ? 255 : (b < 0) ? 0 : b;

                        color = new Color(r, g, b);
                        newImage.setRGB(lin, col, color.getRGB());
                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_ADITIVO3ActionPerformed

    /**
     * Esse metodo aplica o controle de brilho multiplicativo somente na banda azul da imagem
     * @param evt 
     */
    private void MULTIPLICATIVO3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MULTIPLICATIVO3ActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");

                if (input == null) {
                    return;
                }
                int c = Integer.parseInt(input);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        Color color = new Color(image.getRGB(lin, col));
                        int r = color.getRed();
                        int g = color.getGreen();
                        int b = color.getBlue() * c;

                        b = (b > 255) ? 255 : (b < 0) ? 0 : b;

                        color = new Color(r, g, b);
                        newImage.setRGB(lin, col, color.getRGB());
                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_MULTIPLICATIVO3ActionPerformed

    /**
     * Esse metodo aplica o controle de brilho aditivo em todas as bandas da imagem
     * @param evt 
     */
    private void ADITIVO4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADITIVO4ActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");
                if (input == null) {
                    return;
                }
                int c = Integer.parseInt(input);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        Color color = new Color(image.getRGB(lin, col));
                        int r = color.getRed() + c;
                        int g = color.getGreen() + c;
                        int b = color.getBlue() + c;

                        r = (r > 255) ? 255 : (r < 0) ? 0 : r;
                        g = (g > 255) ? 255 : (g < 0) ? 0 : g;
                        b = (b > 255) ? 255 : (b < 0) ? 0 : b;

                        color = new Color(r, g, b);
                        newImage.setRGB(lin, col, color.getRGB());
                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_ADITIVO4ActionPerformed

    /**
     * Esse metodo aplica o controle de brilho multiplicativo em todas as bandas da imagem
     * @param evt 
     */
    private void MULTIPLICATIVO4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MULTIPLICATIVO4ActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");

                if (input == null) {
                    return;
                }
                int c = Integer.parseInt(input);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        Color color = new Color(image.getRGB(lin, col));
                        int r = color.getRed() * c;
                        int g = color.getGreen() * c;
                        int b = color.getBlue() * c;

                        r = (r > 255) ? 255 : (r < 0) ? 0 : r;
                        g = (g > 255) ? 255 : (g < 0) ? 0 : g;
                        b = (b > 255) ? 255 : (b < 0) ? 0 : b;

                        color = new Color(r, g, b);
                        newImage.setRGB(lin, col, color.getRGB());
                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_MULTIPLICATIVO4ActionPerformed

    /**
     * Esse metodo aplica o controle de brilho aditivo na banda Y da matriz YIQ caso ela ja esteja inicializada
     * @param evt 
     */
    private void ADITIVO5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADITIVO5ActionPerformed
        try {

            String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");

            if (input == null) {
                return;
            }
            int c = Integer.parseInt(input);

            if (YIQ != null) {
                for (int lin = 0; lin < YIQ.length; lin++) {
                    for (int col = 0; col < YIQ[0].length; col++) {

                        YIQ[lin][col][0] += c;
                    }
                }
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
        }


    }//GEN-LAST:event_ADITIVO5ActionPerformed

    /**
     * Esse metodo aplica o controle de brilho multiplicativo na banda Y da matriz YIQ caso ela ja esteja inicializada
     * @param evt 
     */
    private void MULTIPLICATIVO5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MULTIPLICATIVO5ActionPerformed
        try {

            String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");

            if (input == null) {
                return;
            }
            int c = Integer.parseInt(input);

            if (YIQ != null) {
                for (int lin = 0; lin < YIQ.length; lin++) {
                    for (int col = 0; col < YIQ[0].length; col++) {

                        YIQ[lin][col][0] *= c;
                    }
                }
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
        }
    }//GEN-LAST:event_MULTIPLICATIVO5ActionPerformed

    /**
     * Esse metodo aplica o negativo na banda Y da matriz YIQ caso ela ja esteja inicializada
     * @param evt 
     */
    private void NYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NYActionPerformed
        if (YIQ != null) {
            for (int lin = 0; lin < YIQ.length; lin++) {
                for (int col = 0; col < YIQ[0].length; col++) {

                    YIQ[lin][col][0] = 255 - YIQ[lin][col][0];
                }
            }
        }
    }//GEN-LAST:event_NYActionPerformed

    /**
     * Esse metodo aplica a limirizacao somente na banda vermelha da imagem
     * @param evt 
     */
    private void LRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LRActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");

                if (input == null) {
                    return;
                }

                int limiar = Integer.parseInt(input);

                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {

                        Color color = new Color(image.getRGB(lin, col));

                        if (color.getRed() > limiar) {
                            newImage.setRGB(lin, col, new Color(255, color.getGreen(), color.getBlue()).getRGB());
                        } else {
                            newImage.setRGB(lin, col, new Color(0, color.getGreen(), color.getBlue()).getRGB());
                        }

                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_LRActionPerformed

    /**
     * Esse metodo aplica a limirizacao na banda Y da matriz YIQ caso ela ja esteja inicializada 
     * @param evt 
     */
    private void LYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LYActionPerformed
        if (YIQ != null) {

            try {
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");

                if (input == null) {
                    return;
                }

                int limiar = Integer.parseInt(input);

                for (int lin = 0; lin < YIQ.length; lin++) {
                    for (int col = 0; col < YIQ[0].length; col++) {

                        if (YIQ[lin][col][0] > limiar) {
                            YIQ[lin][col][0] = 255;
                        } else {
                            YIQ[lin][col][0] = 0;
                        }

                    }
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_LYActionPerformed

    /**
     * Esse metodo aplica a limirizacao somente na banda verde da imagem
     * @param evt 
     */
    private void LGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LGActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");

                if (input == null) {
                    return;
                }

                int limiar = Integer.parseInt(input);

                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {

                        Color color = new Color(image.getRGB(lin, col));

                        if (color.getGreen() > limiar) {
                            newImage.setRGB(lin, col, new Color(color.getRed(), 255, color.getBlue()).getRGB());
                        } else {
                            newImage.setRGB(lin, col, new Color(color.getRed(), 0, color.getBlue()).getRGB());
                        }

                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_LGActionPerformed

    /**
     * Esse metodo aplica a limirizacao somente na banda azul da imagem
     * @param evt 
     */
    private void LBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LBActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                String input = JOptionPane.showInputDialog("Informe o valor de controle de brilho desejado:  ");

                if (input == null) {
                    return;
                }

                int limiar = Integer.parseInt(input);

                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {

                        Color color = new Color(image.getRGB(lin, col));

                        if (color.getBlue() > limiar) {
                            newImage.setRGB(lin, col, new Color(color.getRed(), color.getGreen(), 255).getRGB());
                        } else {
                            newImage.setRGB(lin, col, new Color(color.getRed(), color.getGreen(), 0).getRGB());
                        }

                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_LBActionPerformed

    /**
     * Esse metodo aplica o filtro mediana na banda vermelha da imagem
     * @param evt 
     */
    private void MRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MRActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                int m, n;
                JTextField mField = new JTextField(5);
                JTextField nField = new JTextField(5);

                Object[] fields = {"m:", mField, "n:", nField};

                int result = JOptionPane.showConfirmDialog(null, fields,
                        "Diga o valor m x n do seu filtro", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    m = Integer.parseInt(mField.getText());
                    n = Integer.parseInt(nField.getText());

                } else {
                    return;
                }

                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        Color color = null;
                        ArrayList<Integer> r = new ArrayList<>();
                        int mediana = 0;

                        for (int i = lin - (m / 2); i <= lin + (m / 2); i++) {
                            for (int j = col - (n / 2); j <= col + (n / 2); j++) {
                                if (i < 0 || i >= image.getWidth()) {
                                    r.add(0);
                                    continue;
                                } else if (j < 0 || j >= image.getHeight()) {
                                    r.add(0);
                                    continue;
                                }

                                color = new Color(image.getRGB(i, j));
                                r.add(color.getRed());

                            }
                        }

                        Collections.sort(r);

                        mediana = r.get((m * n) / 2);

                        color = new Color(image.getRGB(lin, col));
                        color = new Color(mediana, color.getGreen(), color.getBlue());
                        newImage.setRGB(lin, col, color.getRGB());

                    }
                }

                pnlImage.setImage(newImage);
                System.out.println("123");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_MRActionPerformed

    /**
     * Esse metodo aplica o filtro mediana na banda verde da imagem
     * @param evt 
     */
    private void MGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MGActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                int m, n;
                JTextField mField = new JTextField(5);
                JTextField nField = new JTextField(5);

                Object[] fields = {"m:", mField, "n:", nField};

                int result = JOptionPane.showConfirmDialog(null, fields,
                        "Diga o valor m x n do seu filtro", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    m = Integer.parseInt(mField.getText());
                    n = Integer.parseInt(nField.getText());

                } else {
                    return;
                }

                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        Color color = null;
                        ArrayList<Integer> g = new ArrayList<>();
                        int mediana = 0;

                        for (int i = lin - m / 2; i <= lin + m / 2; i++) {

                            for (int j = col - n / 2; j <= col + n / 2; j++) {
                                if (i < 0 || i >= image.getWidth()) {
                                    g.add(0);
                                    continue;
                                } else if (j < 0 || j >= image.getHeight()) {
                                    g.add(0);
                                    continue;
                                }

                                color = new Color(image.getRGB(i, j));
                                g.add(color.getGreen());

                            }
                        }

                        Collections.sort(g);
                        mediana = g.get((m * n) / 2);

                        color = new Color(image.getRGB(lin, col));
                        color = new Color(color.getGreen(), mediana, color.getBlue());
                        newImage.setRGB(lin, col, color.getRGB());
                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_MGActionPerformed

    /**
     * Esse metodo aplica o filtro mediana na banda azul da imagem
     * @param evt 
     */
    private void MBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                int m, n;
                JTextField mField = new JTextField(5);
                JTextField nField = new JTextField(5);

                Object[] fields = {"m:", mField, "n:", nField};

                int result = JOptionPane.showConfirmDialog(null, fields,
                        "Diga o valor m x n do seu filtro", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    m = Integer.parseInt(mField.getText());
                    n = Integer.parseInt(nField.getText());

                } else {
                    return;
                }

                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        Color color = null;
                        ArrayList<Integer> b = new ArrayList<>();
                        int mediana = 0;

                        for (int i = lin - m / 2; i <= lin + m / 2; i++) {
                            for (int j = col - n / 2; j <= col + n / 2; j++) {
                                if (i < 0 || i >= image.getWidth()) {
                                    b.add(0);
                                    continue;
                                } else if (j < 0 || j >= image.getHeight()) {
                                    b.add(0);
                                    continue;
                                }

                                color = new Color(image.getRGB(i, j));
                                b.add(color.getBlue());

                            }
                        }

                        Collections.sort(b);
                        mediana = b.get((m * n) / 2);

                        color = new Color(image.getRGB(lin, col));
                        color = new Color(color.getBlue(), color.getGreen(), mediana);
                        newImage.setRGB(lin, col, color.getRGB());
                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_MBActionPerformed
    
    /**
     * Esse metodo aplica o filtro mediana na banda Y da matriz YIQ caso ela esteja inicializada
     * @param evt 
     */
    private void MYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MYActionPerformed
        if (YIQ != null) {
            try {
                int m, n;
                JTextField mField = new JTextField(5);
                JTextField nField = new JTextField(5);

                Object[] fields = {"m:", mField, "n:", nField};

                int result = JOptionPane.showConfirmDialog(null, fields,
                        "Diga o valor m x n do seu filtro", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    m = Integer.parseInt(mField.getText());
                    n = Integer.parseInt(nField.getText());

                } else {
                    return;
                }

                for (int lin = 0; lin < YIQ.length; lin++) {
                    for (int col = 0; col < YIQ[0].length; col++) {
                        ArrayList<Double> Y = new ArrayList<>();

                        for (int i = lin - m / 2; i <= lin + m / 2; i++) {
                            for (int j = col - n / 2; j <= col + n / 2; j++) {
                                if (i < 0 || i >= YIQ.length) {
                                    Y.add(0.0);
                                    continue;
                                } else if (j < 0 || j >= YIQ[0].length) {
                                    Y.add(0.0);
                                    continue;
                                }

                                Y.add(YIQ[i][j][0]);

                            }
                        }

                        Collections.sort(Y);
                        YIQ[lin][col][0] = Y.get((m * n) / 2);

                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_MYActionPerformed

    /**
     * Esse metodo aplica o filtro mediana em todas as bandas da imagem
     * @param evt 
     */
    private void MCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MCActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                int m, n;
                JTextField mField = new JTextField(5);
                JTextField nField = new JTextField(5);

                Object[] fields = {"m:", mField, "n:", nField};

                int result = JOptionPane.showConfirmDialog(null, fields,
                        "Diga o valor m x n do seu filtro", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    m = Integer.parseInt(mField.getText());
                    n = Integer.parseInt(nField.getText());

                } else {
                    return;
                }

                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {
                        ArrayList<Integer> r = new ArrayList<>();
                        ArrayList<Integer> g = new ArrayList<>();
                        ArrayList<Integer> b = new ArrayList<>();
                        int medianaR = 0;
                        int medianaG = 0;
                        int medianaB = 0;
                        Color color = null;
                        for (int i = lin - m / 2; i <= lin + m / 2; i++) {
                            for (int j = col - n / 2; j <= col + n / 2; j++) {
                                if (i < 0 || i >= image.getWidth()) {
                                    r.add(0);
                                    g.add(0);
                                    b.add(0);
                                    continue;
                                } else if (j < 0 || j >= image.getHeight()) {
                                    r.add(0);
                                    g.add(0);
                                    b.add(0);
                                    continue;
                                }

                                color = new Color(image.getRGB(i, j));
                                r.add(color.getRed());
                                g.add(color.getGreen());
                                b.add(color.getBlue());
                            }
                        }

                        Collections.sort(r);
                        Collections.sort(g);
                        Collections.sort(b);

                        medianaR = r.get((m * n) / 2);
                        medianaG = g.get((m * n) / 2);
                        medianaB = b.get((m * n) / 2);

                        color = new Color(medianaR, medianaG, medianaB);
                        newImage.setRGB(lin, col, color.getRGB());
                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_MCActionPerformed

    /**
     * Esse metodo aplica uma convolucao m x n na banda vermelha da imagem
     * @param evt 
     */
    private void CRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CRActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                int m, n, bias;
                JTextField mField = new JTextField(5);
                JTextField nField = new JTextField(5);
                JTextField bField = new JTextField(5);

                Object[] fields = {"m:", mField, "n:", nField, "Bias:", bField};

                int result = JOptionPane.showConfirmDialog(null, fields,
                        "Diga o valor m x n do seu filtro e sua bias", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    m = Integer.parseInt(mField.getText());
                    n = Integer.parseInt(nField.getText());
                    bias = Integer.parseInt(bField.getText());
                } else {
                    return;
                }

                double[][] mascara = new double[m][n];
                for (int i = 0; i < m; i++) {
                    for (int j = 0; j < n; j++) {
                        JOptionPane.showConfirmDialog(null, mField,
                                "Diga o valor a" + i + "" + j, JOptionPane.OK_CANCEL_OPTION);
                        mascara[i][j] = Double.parseDouble(mField.getText());
                    }
                }

                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {

                        double r = 0;
                        Color color = null;

                        for (int i = lin - m / 2, x = 0; i <= lin + m / 2; i++, x++) {
                            for (int j = col - n / 2, y = 0; j <= col + n / 2; j++, y++) {
                                if (i < 0 || i >= image.getWidth()) {
                                    continue;
                                } else if (j < 0 || j >= image.getHeight()) {
                                    continue;
                                }

                                color = new Color(image.getRGB(i, j));
                                r += color.getRed() * mascara[x][y];
                            }
                        }
                        r += bias;
                        r = (r > 255) ? 255 : (r < 0) ? 0 : r;

                        color = new Color(image.getRGB(lin, col));
                        color = new Color((int) r, color.getGreen(), color.getBlue());
                        newImage.setRGB(lin, col, color.getRGB());

                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_CRActionPerformed

    /**
     * Esse metodo aplica uma convolucao m x n na banda verde da imagem
     * @param evt 
     */
    private void CGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CGActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                int m, n, bias;
                JTextField mField = new JTextField(5);
                JTextField nField = new JTextField(5);
                JTextField bField = new JTextField(5);

                Object[] fields = {"m:", mField, "n:", nField, "Bias:", bField};

                int result = JOptionPane.showConfirmDialog(null, fields,
                        "Diga o valor m x n do seu filtro e sua bias", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    m = Integer.parseInt(mField.getText());
                    n = Integer.parseInt(nField.getText());
                    bias = Integer.parseInt(bField.getText());
                } else {
                    return;
                }

                double[][] mascara = new double[m][n];
                for (int i = 0; i < m; i++) {
                    for (int j = 0; j < n; j++) {
                        JOptionPane.showConfirmDialog(null, mField,
                                "Diga o valor a" + i + "" + j, JOptionPane.OK_CANCEL_OPTION);
                        mascara[i][j] = Double.parseDouble(mField.getText());
                    }
                }

                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {

                        double g = 0;
                        Color color = null;

                        for (int i = lin - m / 2, x = 0; i <= lin + m / 2; i++, x++) {
                            for (int j = col - n / 2, y = 0; j <= col + n / 2; j++, y++) {
                                if (i < 0 || i >= image.getWidth()) {
                                    continue;
                                } else if (j < 0 || j >= image.getHeight()) {
                                    continue;
                                }

                                color = new Color(image.getRGB(i, j));
                                g += color.getGreen() * mascara[x][y];
                            }
                        }
                        g += bias;
                        g = (g > 255) ? 255 : (g < 0) ? 0 : g;

                        color = new Color(image.getRGB(lin, col));
                        color = new Color(color.getRed(), (int) g, color.getBlue());
                        newImage.setRGB(lin, col, color.getRGB());

                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_CGActionPerformed

    /**
     * Esse metodo aplica uma convolucao m x n na banda azul da imagem
     * @param evt 
     */
    private void CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                int m, n, bias;
                JTextField mField = new JTextField(5);
                JTextField nField = new JTextField(5);
                JTextField bField = new JTextField(5);

                Object[] fields = {"m:", mField, "n:", nField, "Bias:", bField};

                int result = JOptionPane.showConfirmDialog(null, fields,
                        "Diga o valor m x n do seu filtro e sua bias", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    m = Integer.parseInt(mField.getText());
                    n = Integer.parseInt(nField.getText());
                    bias = Integer.parseInt(bField.getText());
                } else {
                    return;
                }

                double[][] mascara = new double[m][n];
                for (int i = 0; i < m; i++) {
                    for (int j = 0; j < n; j++) {
                        JOptionPane.showConfirmDialog(null, mField,
                                "Diga o valor a" + i + "" + j, JOptionPane.OK_CANCEL_OPTION);
                        mascara[i][j] = Double.parseDouble(mField.getText());
                    }
                }

                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {

                        double b = 0;
                        Color color = null;

                        for (int i = lin - m / 2, x = 0; i <= lin + m / 2; i++, x++) {
                            for (int j = col - n / 2, y = 0; j <= col + n / 2; j++, y++) {
                                if (i < 0 || i >= image.getWidth()) {
                                    continue;
                                } else if (j < 0 || j >= image.getHeight()) {
                                    continue;
                                }

                                color = new Color(image.getRGB(i, j));
                                b += color.getGreen() * mascara[x][y];
                            }
                        }
                        b += bias;
                        b = (b > 255) ? 255 : (b < 0) ? 0 : b;

                        color = new Color(image.getRGB(lin, col));
                        color = new Color(color.getRed(), color.getGreen(), (int) b);
                        newImage.setRGB(lin, col, color.getRGB());

                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_CBActionPerformed

    /**
     * Esse metodo aplica uma convolucao m x n na banda Y da matriz YIQ caso ela esteja inicializada
     * @param evt 
     */
    private void CYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CYActionPerformed
        if (YIQ != null) {
            BufferedImage image = pnlImage.getCurrentImage();

            try {
                int m, n, bias;
                JTextField mField = new JTextField(5);
                JTextField nField = new JTextField(5);
                JTextField bField = new JTextField(5);

                Object[] fields = {"m:", mField, "n:", nField, "Bias:", bField};

                int result = JOptionPane.showConfirmDialog(null, fields,
                        "Diga o valor m x n do seu filtro e sua bias", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    m = Integer.parseInt(mField.getText());
                    n = Integer.parseInt(nField.getText());
                    bias = Integer.parseInt(bField.getText());
                } else {
                    return;
                }

                double[][] mascara = new double[m][n];
                for (int i = 0; i < m; i++) {
                    for (int j = 0; j < n; j++) {
                        JOptionPane.showConfirmDialog(null, mField,
                                "Diga o valor a" + i + "" + j, JOptionPane.OK_CANCEL_OPTION);
                        mascara[i][j] = Double.parseDouble(mField.getText());
                    }
                }

                for (int lin = 0; lin < YIQ.length; lin++) {
                    for (int col = 0; col < YIQ[0].length; col++) {

                        double Y = 0;

                        for (int i = lin - m / 2, x = 0; i <= lin + m / 2; i++, x++) {
                            for (int j = col - n / 2, y = 0; j <= col + n / 2; j++, y++) {
                                if (i < 0 || i >= image.getWidth()) {
                                    continue;
                                } else if (j < 0 || j >= image.getHeight()) {
                                    continue;
                                }

                                Y += YIQ[i][j][0] * mascara[x][y];
                            }
                        }

                        Y += bias;

                        YIQ[lin][col][0] = Y;

                    }
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_CYActionPerformed

    /**
     * Esse metodo aplica uma convolucao m x n em todas as bandas da imagem
     * @param evt 
     */
    private void CCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CCActionPerformed
        BufferedImage image = pnlImage.getCurrentImage();
        if (image != null) {
            try {
                int m, n, bias;
                JTextField mField = new JTextField(5);
                JTextField nField = new JTextField(5);
                JTextField bField = new JTextField(5);

                Object[] fields = {"m:", mField, "n:", nField, "Bias:", bField};

                int result = JOptionPane.showConfirmDialog(null, fields,
                        "Diga o valor m x n do seu filtro e sua bias", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    m = Integer.parseInt(mField.getText());
                    n = Integer.parseInt(nField.getText());
                    bias = Integer.parseInt(nField.getText());
                } else {
                    return;
                }

                double[][] mascara = new double[m][n];
                for (int i = 0; i < m; i++) {
                    for (int j = 0; j < n; j++) {
                        JOptionPane.showConfirmDialog(null, mField,
                                "Diga o valor a" + i + "" + j, JOptionPane.OK_CANCEL_OPTION);

                        mascara[i][j] = Double.parseDouble(mField.getText());
                        System.out.println(mascara[i][j]);
                    }
                }

                BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);

                for (int lin = 0; lin < image.getWidth(); lin++) {
                    for (int col = 0; col < image.getHeight(); col++) {

                        double r = 0;
                        double g = 0;
                        double b = 0;
                        Color color = null;

                        for (int i = lin - m / 2, x = 0; i <= lin + m / 2; i++, x++) {
                            for (int j = col - n / 2, y = 0; j <= col + n / 2; j++, y++) {
                                if (i < 0 || i >= image.getWidth()) {
                                    continue;
                                } else if (j < 0 || j >= image.getHeight()) {
                                    continue;
                                }

                                color = new Color(image.getRGB(i, j));

                                r += color.getRed() * mascara[x][y];
                                g += color.getGreen() * mascara[x][y];
                                b += color.getBlue() * mascara[x][y];

                            }
                        }

                        r += bias;
                        g += bias;
                        b += bias;
                        r = (r > 255) ? 255 : (r < 0) ? 0 : r;
                        g = (g > 255) ? 255 : (g < 0) ? 0 : g;
                        b = (b > 255) ? 255 : (b < 0) ? 0 : b;

                        color = new Color((int) r, (int) g, (int) b);
                        newImage.setRGB(lin, col, color.getRGB());

                    }
                }

                pnlImage.setImage(newImage);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Caracter invalido. Digite um numero.");
            }
        }
    }//GEN-LAST:event_CCActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    private void showFilename(String path) {
        if (path == null) {
            jLabel1.setText("No File Loaded");
        } else {
            jLabel1.setText(path);
        }

    }

    private void resize() {
        if (pnlImage.getCurrentImage() != null) {
            this.setSize(pnlImage.getWidth() + 130, pnlImage.getHeight() + 85);
        } else {
            this.setSize(720, 500);
        }
    }

    private void setButtonsEnabled(boolean status) {
        btnAumentar.setEnabled(status);
        btnDiminuir.setEnabled(status);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ADITIVO1;
    private javax.swing.JMenuItem ADITIVO2;
    private javax.swing.JMenuItem ADITIVO3;
    private javax.swing.JMenuItem ADITIVO4;
    private javax.swing.JMenuItem ADITIVO5;
    private javax.swing.JMenuItem B;
    private javax.swing.JMenu BB;
    private javax.swing.JMenu BC;
    private javax.swing.JMenu BG;
    private javax.swing.JMenuItem BM;
    private javax.swing.JMenu BR;
    private javax.swing.JMenu BY;
    private javax.swing.JMenu Bandas;
    private javax.swing.JMenu Brilhos;
    private javax.swing.JMenuItem CB;
    private javax.swing.JMenuItem CC;
    private javax.swing.JMenuItem CG;
    private javax.swing.JMenuItem CLoseAction;
    private javax.swing.JMenuItem CR;
    private javax.swing.JMenuItem CY;
    private javax.swing.JMenu Convolucao;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Filters;
    private javax.swing.JMenuItem G;
    private javax.swing.JMenuItem GM;
    private javax.swing.JMenuItem LB;
    private javax.swing.JMenuItem LG;
    private javax.swing.JMenuItem LR;
    private javax.swing.JMenuItem LY;
    private javax.swing.JMenu Limiares;
    private javax.swing.JMenuItem MB;
    private javax.swing.JMenuItem MC;
    private javax.swing.JMenuItem MG;
    private javax.swing.JMenuItem MR;
    private javax.swing.JMenuItem MULTIPLICATIVO1;
    private javax.swing.JMenuItem MULTIPLICATIVO2;
    private javax.swing.JMenuItem MULTIPLICATIVO3;
    private javax.swing.JMenuItem MULTIPLICATIVO4;
    private javax.swing.JMenuItem MULTIPLICATIVO5;
    private javax.swing.JMenuItem MY;
    private javax.swing.JMenu Medianas;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JMenuItem N;
    private javax.swing.JMenuItem NB;
    private javax.swing.JMenuItem NG;
    private javax.swing.JMenuItem NR;
    private javax.swing.JMenuItem NY;
    private javax.swing.JMenu Negativos;
    private javax.swing.JMenuItem OpenAction;
    private javax.swing.JMenuItem QuitAction;
    private javax.swing.JMenuItem R;
    private javax.swing.JMenuItem RM;
    private javax.swing.JMenuItem SaveAction;
    private javax.swing.JButton btnAumentar;
    private javax.swing.JButton btnDiminuir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPanel pnlControl;
    private javax.swing.JMenuItem toRGB;
    private javax.swing.JMenuItem toYIQ;
    // End of variables declaration//GEN-END:variables
}
